# SPDX-License-Identifier: MIT
---
- name: Define colocation constraint.id '{{
    constraint.id | d(constraint_index) }}'
  ansible.builtin.set_fact:
    __ha_cluster_constraint_id:
      "{{ constraint.id if constraint.id is defined else
      (constraint.resource_leader.id | quote) + '-colocation' }}"

# Verify if Shadow CIB already contains same constraint id.
- name: Verify colocation constraint presence {{ __ha_cluster_constraint_id }}
  ansible.builtin.command:
    cmd: |
      crm -c {{ __ha_cluster_crm_shadow }}
      configure show {{ __ha_cluster_constraint_id }}
  register: __ha_cluster_constraint_status
  changed_when: false
  failed_when: false

# Delete constraint id in Shadow CIB to avoid errors during cibadmin patch.
- name: Delete present colocation constraint {{ __ha_cluster_constraint_id }}
  ansible.builtin.command:
    cmd: |
      crm -c {{ __ha_cluster_crm_shadow }}
      configure delete {{ __ha_cluster_constraint_id }}
  when: __ha_cluster_constraint_status.rc == 0
  check_mode: false
  changed_when: not ansible_check_mode

- name: Configure colocation constraint {{ __ha_cluster_constraint_id }}
  ansible.builtin.command:
    cmd: |
      crm -c {{ __ha_cluster_crm_shadow }}
      configure colocation {{ __ha_cluster_constraint_id }}
      {% for option in constraint.options | d([]) if option.name == 'score' %}
        {{ option.value | lower | replace('infinity', 'inf') | quote }}:
      {% else %}
        inf:
      {% endfor %}
        {{ constraint.resource_leader.id
         | quote }} {{ constraint.resource_follower.id | quote }}
      {% for option in constraint.options | d([]) if option.name != 'score' %}
        {{ option.name | quote }}={{ option.value | quote }}
      {% endfor %}
  check_mode: false
  changed_when: not ansible_check_mode
