---
# yamllint disable rule:line-length
variables:
  PYTHON_CODE_DIRS: "./library/ ./module_utils/ha_cluster_lsr/ ./tests/unit/"
  WOKE_CONFIG: "https://raw.githubusercontent.com/linux-system-roles/tox-lsr/main/src/tox_lsr/config_files/woke.yml"
  YAMLLINT_CONFIG: "{extends: .yamllint.yml, ignore: [.github/]}"
  PYENV_ROOT: /root/pyenvs/ansible

.rhel8_images: &RHEL8_IMAGES
  - LsrRhel8NextAnsibleCurrent
  - LsrRhel8NextAnsible29
  - LsrRhel8OldestAnsibleCurrent
  - LsrRhel8OldestAnsible29

.rhel9_images: &RHEL9_IMAGES
  - LsrRhel9NextAnsibleCurrent
  - LsrRhel9NextAnsible29
  - LsrRhel9CurrentAnsibleCurrent
  - LsrRhel9CurrentAnsible29

.all_images: &ALL_IMAGES
  - LsrRhel9NextAnsibleCurrent
  - LsrRhel9NextAnsible29
  - LsrRhel9CurrentAnsibleCurrent
  - LsrRhel9CurrentAnsible29
  - LsrRhel8NextAnsibleCurrent
  - LsrRhel8NextAnsible29
  - LsrRhel8OldestAnsibleCurrent
  - LsrRhel8OldestAnsible29

.tier1_tests: &TIER1_TESTS
  - cib_constraints_create
  - cib_properties_empty
  - cib_properties_one_set
  - cib_resources_create
  - cib_rsc_op_defaults
  - cluster_advanced_knet_full
  - cluster_advanced_knet_implicit
  - cluster_advanced_udp_full
  - cluster_basic_custom_fence_agents
  - cluster_basic_custom_packages
  - cluster_basic_custom_pcsd_tls_cert_role
  - cluster_basic_custom_pcsd_tls
  - cluster_basic_disabled
  - cluster_basic_existing_psks
  - cluster_basic_new_psks
  - cluster_basic
  - cluster_destroy
  - default
  - include_vars_from_parent
  - qdevice_all_options
  - qdevice_minimal
  - qnetd_and_cluster
  - qnetd_disabled
  - qnetd
  - sbd_all_options
  - sbd_check_devices_count
  - sbd_defaults_disabled
  - sbd_defaults
  - sbd_needs_atb_while_atb_disabled
  - sbd_needs_atb_while_atb_enabled

# Jobs running linters and test tools shipped with ansible. Old versions of
# ansible don't provide all required functionality.
.job_ansible_check:
  parallel:
    matrix:
      - BASE_IMAGE_NAME: *ALL_IMAGES
  rules:
    - if: ($BASE_IMAGE_NAME =~ /.*AnsibleCurrent$/) && ($BASE_IMAGE_NAME !~ /^LsrRhel8Oldest.*/)

# Do not run python unit tests and linters on RHEL8 as it doesn't ship a
# compatible version of pcs.
# Linters depending on pcs code (mypy, pylint) benefit from running on all
# capable combinations of pcs, python and ansible.
.job_python:
  parallel:
    matrix:
      - BASE_IMAGE_NAME: *ALL_IMAGES
  rules:
    - if: $BASE_IMAGE_NAME !~ /^LsrRhel8.*/

# Linting / code formating that either works the same on all images or using
# the newest linter / formatter is desired
.job_generic_linter:
  variables:
    BASE_IMAGE_NAME: LsrRhel9NextAnsibleCurrent

#  If we are running Python 3.11, it won't find installed pcs. Python tests
#  only run on RHEL 9 and that ships pcs built for Python 3.9. To overcome
#  this, symlink pcs to pyenv.
.symlink_pcs_to_pyenv: &symlink_pcs_to_pyenv
  - PYTHON_VER=$(python3 -c 'import sys; v=sys.version_info; print(f"{v.major}.{v.minor}")')
  - PYENV_PACKAGES="${PYENV_ROOT}/lib/python${PYTHON_VER}/site-packages"
  - PCS_DIR=$(rpm -ql pcs | grep 'site-packages/pcs$')
  - PCS_EGG=$(rpm -ql pcs | grep 'site-packages/pcs.*\.egg-info$')
  - PCS_EGG_NAME=$(basename "$PCS_EGG")
  - if [ "x$PYTHON_VER" != "x3.9" ]; then ln -s "${PCS_DIR}" "${PYENV_PACKAGES}/pcs"; fi
  - if [ "x$PYTHON_VER" != "x3.9" ]; then ln -s "${PCS_EGG}" "${PYENV_PACKAGES}/${PCS_EGG_NAME}"; fi
  - if [ "x$PYTHON_VER" != "x3.9" ]; then pushd .; cd "${PYENV_PACKAGES}"; rename --verbose "3.9" "$PYTHON_VER" pcs-*.egg-info; popd; fi
  - ls -l "$PYENV_PACKAGES"

default:
  before_script:
    - source "${PYENV_ROOT}/bin/activate"
    - python --version

stages:
  - tier0
  - tier1

# tier0 - non-python
ansible_lint:
  extends: .job_ansible_check
  stage: tier0
  script:
    - ansible-lint --version
    - ansible-lint -v --exclude=tests/roles --exclude=.github --skip-list role-name,fqcn --config-file .ansible-lint

ansible_test:
  extends: .job_ansible_check
  stage: tier0
  script:
    - MY_DIR="$(basename $(pwd))"
    - if [ "x$MY_DIR" != "xha_cluster" ]; then ln -s "$MY_DIR" ../ha_cluster; fi
    - LSR_INFO=true python /usr/local/lib/lsr-auto-maintenance/lsr_role2collection.py --dest-path ../ --src-path ../ --src-owner tomjelinek --role ha_cluster
    - coll_dir="../ansible_collections/fedora/linux_system_roles/"
    - ignore_dir="$coll_dir/tests/sanity"  # wokeignore:rule=sanity
    - mkdir -pv "$ignore_dir"
    - for file in .sanity-ansible-ignore-*.txt; do if [ -f "$file" ]; then cp "$file" "$ignore_dir/${file//*.sanity-ansible-}"; fi; done  # wokeignore:rule=sanity
    - cd "$coll_dir"
    - ansible-test --version
    - ansible-test sanity -v --color=yes --truncate=0 --no-redact --coverage --docker  # wokeignore:rule=sanity

shellcheck:
  extends: .job_generic_linter
  stage: tier0
  script:
    - shellcheck --version
    - shellcheck files/*.sh

woke:
  extends: .job_generic_linter
  stage: tier0
  script:
    - woke --version
    - woke -c "${WOKE_CONFIG}" --exit-1-on-failure --debug

yaml_lint:
  extends: .job_generic_linter
  stage: tier0
  script:
    - yamllint --version
    - yamllint --config-data "${YAMLLINT_CONFIG}" ./

# tier0 - python
black:
  extends: .job_generic_linter
  stage: tier0
  script:
    - black --version
    - black --config pyproject.toml --check ${PYTHON_CODE_DIRS}

isort:
  extends: .job_generic_linter
  stage: tier0
  script:
    - isort --version
    - isort --check-only ${PYTHON_CODE_DIRS}

mypy:
  extends: .job_python
  stage: tier0
  script:
    - dnf install -y pcs
    - touch "$(rpm -ql pcs | grep 'site-packages/pcs$')/py.typed"
    - *symlink_pcs_to_pyenv
    - pcs --version
    - mypy --version
    - mypy --config-file mypy.ini ${PYTHON_CODE_DIRS}

pylint:
  extends: .job_python
  stage: tier0
  script:
    - pylint --rcfile pylintrc --persistent=n --reports=y --score=y --disable similarities ${PYTHON_CODE_DIRS}

unit_tests:
  extends: .job_python
  stage: tier0
  script:
    - dnf install -y pcs
    - *symlink_pcs_to_pyenv
    - pcs --version
    - PYTHONPATH="./library:./module_utils:$PYTHONPATH" python -m unittest --verbose tests/unit/*.py

# tier 1
.role_test:
  stage: tier1
  script:
    - ansible-galaxy -vv collection install -r ./meta/collection-requirements.yml
    - varsparams=""
    - TEST_FILE_NAME="tests_${TEST_FILE}.yml"
    - echo "$TEST_FILE_NAME"
    - if ! grep "$TEST_FILE_NAME" tests/no-vault-variables.txt; then varsparams="-e @tests/vars/vault-variables.yml"; fi
    - ansible-playbook -v -i localhost, --vault-password-file tests/vault_pwd $varsparams "tests/${TEST_FILE_NAME}"
  artifacts:
    paths:
      - /var/log/pcsd/
    when: on_failure
    expire_in: 1 week

rhel8:
  extends: .role_test
  parallel:
    matrix:
      - TEST_FILE: *TIER1_TESTS
        BASE_IMAGE_NAME: *RHEL8_IMAGES

rhel9:
  extends: .role_test
  parallel:
    matrix:
      - TEST_FILE: *TIER1_TESTS
        BASE_IMAGE_NAME: *RHEL9_IMAGES
